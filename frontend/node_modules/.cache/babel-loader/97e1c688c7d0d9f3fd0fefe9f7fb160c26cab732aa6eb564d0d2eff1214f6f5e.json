{"ast":null,"code":"var _jsxFileName = \"/Users/pankajchakrabarty/Desktop/symptom-checker-frontend/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport SymptomInput from \"./components/SymptomInput\";\nimport ResultsDisplay from \"./components/ResultsDisplay\";\nimport Disclaimer from \"./components/Disclaimer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  const [sessionId, setSessionId] = useState(null);\n  const [conversation, setConversation] = useState([]);\n  const [displayedMessages, setDisplayedMessages] = useState([]);\n  const [userInput, setUserInput] = useState(\"\");\n  const [results, setResults] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  // Start a new session on component mount\n  useEffect(() => {\n    const startSession = async () => {\n      try {\n        const res = await fetch(\"http://localhost:5001/api/start-session\", {\n          method: \"POST\"\n        });\n        const data = await res.json();\n        setSessionId(data.sessionId);\n      } catch (err) {\n        console.error(\"Failed to start session:\", err);\n      }\n    };\n    startSession();\n  }, []);\n\n  // Animate conversation messages\n  useEffect(() => {\n    if (conversation.length === 0) {\n      setDisplayedMessages([]);\n      return;\n    }\n    let index = 0;\n    setDisplayedMessages([]);\n    const interval = setInterval(() => {\n      if (index >= conversation.length) {\n        clearInterval(interval);\n        return;\n      }\n      const msg = conversation[index];\n      if (msg && msg.role && msg.text) {\n        setDisplayedMessages(prev => [...prev, msg]);\n      }\n      index++;\n    }, 400);\n    return () => clearInterval(interval);\n  }, [conversation]);\n  const handleSendMessage = async () => {\n    if (!userInput.trim() || !sessionId) return;\n\n    // For the very first message, clear any previous results\n    if (conversation.length === 0) {\n      setResults([]);\n    }\n\n    // Add user message to the conversation immediately\n    const newConversation = [...conversation, {\n      role: \"user\",\n      text: userInput\n    }];\n    setConversation(newConversation);\n    setUserInput(\"\");\n    setLoading(true);\n    try {\n      var _data$possible_condit;\n      const res = await fetch(\"http://localhost:5001/api/next-step\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          sessionId,\n          userMessage: userInput\n        })\n      });\n      const data = await res.json();\n      if (data.assistantMessage) {\n        setConversation(prev => [...prev, {\n          role: \"assistant\",\n          text: data.assistantMessage\n        }]);\n      }\n      if (data.done && (_data$possible_condit = data.possible_conditions) !== null && _data$possible_condit !== void 0 && _data$possible_condit.length) {\n        setResults(data.possible_conditions);\n      }\n    } catch (err) {\n      console.error(\"Error fetching assistant response:\", err);\n      setConversation(prev => [...prev, {\n        role: 'assistant',\n        text: 'Sorry, an error occurred.'\n      }]);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"app-title\",\n      children: \"Medichat Symptom Checker\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"app-subtitle\",\n      children: \"Describe your symptoms naturally. The assistant will respond step-by-step.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), displayedMessages.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"conversation-box\",\n      children: displayedMessages.filter(msg => msg && msg.role && msg.text).map((msg, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chat-message ${msg.role === \"assistant\" ? \"ai-message\" : \"user-message\"}`,\n        children: [msg.role === \"assistant\" && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"ai-icon\",\n          children: \"\\uD83E\\uDD16\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 46\n        }, this), msg.role === \"user\" && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"user-icon\",\n          children: \"\\uD83E\\uDDD1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 41\n        }, this), msg.text]\n      }, idx, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"processing\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"ai-icon\",\n        children: \"\\uD83E\\uDD16\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this), \" Thinking...\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(SymptomInput, {\n      symptoms: userInput,\n      setSymptoms: setUserInput,\n      onCheck: handleSendMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), !loading && results.length > 0 && /*#__PURE__*/_jsxDEV(ResultsDisplay, {\n      results: results\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 42\n    }, this), /*#__PURE__*/_jsxDEV(Disclaimer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Pj5LUc4c1JvdCaxEi47/uS7HVEA=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","SymptomInput","ResultsDisplay","Disclaimer","jsxDEV","_jsxDEV","App","_s","sessionId","setSessionId","conversation","setConversation","displayedMessages","setDisplayedMessages","userInput","setUserInput","results","setResults","loading","setLoading","startSession","res","fetch","method","data","json","err","console","error","length","index","interval","setInterval","clearInterval","msg","role","text","prev","handleSendMessage","trim","newConversation","_data$possible_condit","headers","body","JSON","stringify","userMessage","assistantMessage","done","possible_conditions","className","children","fileName","_jsxFileName","lineNumber","columnNumber","filter","map","idx","symptoms","setSymptoms","onCheck","_c","$RefreshReg$"],"sources":["/Users/pankajchakrabarty/Desktop/symptom-checker-frontend/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport SymptomInput from \"./components/SymptomInput\";\nimport ResultsDisplay from \"./components/ResultsDisplay\";\nimport Disclaimer from \"./components/Disclaimer\";\n\nexport default function App() {\n  const [sessionId, setSessionId] = useState(null);\n  const [conversation, setConversation] = useState([]);\n  const [displayedMessages, setDisplayedMessages] = useState([]);\n  const [userInput, setUserInput] = useState(\"\");\n  const [results, setResults] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  // Start a new session on component mount\n  useEffect(() => {\n    const startSession = async () => {\n      try {\n        const res = await fetch(\"http://localhost:5001/api/start-session\", { method: \"POST\" });\n        const data = await res.json();\n        setSessionId(data.sessionId);\n      } catch (err) {\n        console.error(\"Failed to start session:\", err);\n      }\n    };\n    startSession();\n  }, []);\n\n  // Animate conversation messages\n  useEffect(() => {\n    if (conversation.length === 0) {\n      setDisplayedMessages([]);\n      return;\n    }\n\n    let index = 0;\n    setDisplayedMessages([]);\n\n    const interval = setInterval(() => {\n      if (index >= conversation.length) {\n        clearInterval(interval);\n        return;\n      }\n      const msg = conversation[index];\n      if (msg && msg.role && msg.text) {\n        setDisplayedMessages((prev) => [...prev, msg]);\n      }\n      index++;\n    }, 400);\n\n    return () => clearInterval(interval);\n  }, [conversation]);\n\n  const handleSendMessage = async () => {\n    if (!userInput.trim() || !sessionId) return;\n    \n    // For the very first message, clear any previous results\n    if (conversation.length === 0) {\n        setResults([]);\n    }\n\n    // Add user message to the conversation immediately\n    const newConversation = [...conversation, { role: \"user\", text: userInput }];\n    setConversation(newConversation);\n    setUserInput(\"\");\n    setLoading(true);\n\n    try {\n      const res = await fetch(\"http://localhost:5001/api/next-step\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ sessionId, userMessage: userInput }),\n      });\n\n      const data = await res.json();\n\n      if (data.assistantMessage) {\n        setConversation(prev => [...prev, { role: \"assistant\", text: data.assistantMessage }]);\n      }\n\n      if (data.done && data.possible_conditions?.length) {\n        setResults(data.possible_conditions);\n      }\n\n    } catch (err) {\n      console.error(\"Error fetching assistant response:\", err);\n      setConversation(prev => [...prev, { role: 'assistant', text: 'Sorry, an error occurred.'}]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"app-container\">\n      <h1 className=\"app-title\">Medichat Symptom Checker</h1>\n      <p className=\"app-subtitle\">\n        Describe your symptoms naturally. The assistant will respond step-by-step.\n      </p>\n\n      {displayedMessages.length > 0 && (\n        <div className=\"conversation-box\">\n          {displayedMessages\n            .filter(msg => msg && msg.role && msg.text)\n            .map((msg, idx) => (\n              <div\n                key={idx}\n                className={`chat-message ${msg.role === \"assistant\" ? \"ai-message\" : \"user-message\"}`}\n              >\n                {msg.role === \"assistant\" && <span className=\"ai-icon\">🤖</span>}\n                {msg.role === \"user\" && <span className=\"user-icon\">🧑</span>}\n                {msg.text}\n              </div>\n            ))}\n        </div>\n      )}\n\n      {loading && (\n        <div className=\"processing\">\n          <span className=\"ai-icon\">🤖</span> Thinking...\n        </div>\n      )}\n\n      <SymptomInput\n        symptoms={userInput}\n        setSymptoms={setUserInput}\n        onCheck={handleSendMessage}\n      />\n\n      {!loading && results.length > 0 && <ResultsDisplay results={results} />}\n\n      <Disclaimer />\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}