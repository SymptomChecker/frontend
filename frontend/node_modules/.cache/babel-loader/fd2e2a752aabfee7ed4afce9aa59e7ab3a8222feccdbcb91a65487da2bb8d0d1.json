{"ast":null,"code":"var _jsxFileName = \"/Users/pankajchakrabarty/Desktop/symptom-checker-frontend/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport SymptomInput from \"./components/SymptomInput\";\nimport ResultsDisplay from \"./components/ResultsDisplay\";\nimport Disclaimer from \"./components/Disclaimer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  const [conversation, setConversation] = useState([]);\n  const [displayedMessages, setDisplayedMessages] = useState([]);\n  const [userInput, setUserInput] = useState(\"\");\n  const [results, setResults] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  // Animate conversation messages step by step\n  useEffect(() => {\n    if (conversation.length === 0) {\n      setDisplayedMessages([]);\n      return;\n    }\n    let index = 0;\n    setDisplayedMessages([]);\n    const interval = setInterval(() => {\n      if (index >= conversation.length) {\n        clearInterval(interval);\n        return;\n      }\n      const msg = conversation[index];\n      if (msg && msg.role && msg.text) {\n        setDisplayedMessages(prev => [...prev, msg]);\n      }\n      index++;\n    }, 400);\n    return () => clearInterval(interval);\n  }, [conversation]);\n  const handleSendMessage = async () => {\n    if (!userInput.trim()) return;\n\n    // Reset state for a new check\n    setConversation([]);\n    setDisplayedMessages([]);\n    setResults([]);\n    setLoading(true);\n    try {\n      var _data$possible_condit;\n      // Call the new, more intelligent endpoint\n      const res = await fetch(\"http://localhost:5001/api/check-symptoms\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          userMessage: userInput\n        })\n      });\n      const data = await res.json();\n      if (data.conversation) {\n        setConversation(data.conversation);\n      }\n      if ((_data$possible_condit = data.possible_conditions) !== null && _data$possible_condit !== void 0 && _data$possible_condit.length) {\n        setResults(data.possible_conditions);\n      }\n    } catch (err) {\n      console.error(\"Error fetching analysis:\", err);\n      setConversation([{\n        role: \"assistant\",\n        text: \"Sorry, an error occurred. Please try again.\"\n      }]);\n    } finally {\n      setLoading(false);\n      setUserInput(\"\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"app-title\",\n      children: \"Medichat Symptom Checker\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"app-subtitle\",\n      children: \"Describe your symptoms naturally. The assistant will respond step-by-step.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), displayedMessages.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"conversation-box\",\n      children: displayedMessages.filter(msg => msg && msg.role && msg.text).map((msg, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chat-message ${msg.role === \"assistant\" ? \"ai-message\" : \"user-message\"}`,\n        children: [msg.role === \"assistant\" && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"ai-icon\",\n          children: \"\\uD83E\\uDD16\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 46\n        }, this), msg.role === \"user\" && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"user-icon\",\n          children: \"\\uD83E\\uDDD1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 41\n        }, this), msg.text]\n      }, idx, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"processing\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"ai-icon\",\n        children: \"\\uD83E\\uDD16\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this), \" Thinking...\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(SymptomInput, {\n      symptoms: userInput,\n      setSymptoms: setUserInput,\n      onCheck: handleSendMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), !loading && results.length > 0 && /*#__PURE__*/_jsxDEV(ResultsDisplay, {\n      results: results\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 42\n    }, this), /*#__PURE__*/_jsxDEV(Disclaimer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"SsCwgXH4tOcMs5L/LM7UYoTJDe0=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","SymptomInput","ResultsDisplay","Disclaimer","jsxDEV","_jsxDEV","App","_s","conversation","setConversation","displayedMessages","setDisplayedMessages","userInput","setUserInput","results","setResults","loading","setLoading","length","index","interval","setInterval","clearInterval","msg","role","text","prev","handleSendMessage","trim","_data$possible_condit","res","fetch","method","headers","body","JSON","stringify","userMessage","data","json","possible_conditions","err","console","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","filter","map","idx","symptoms","setSymptoms","onCheck","_c","$RefreshReg$"],"sources":["/Users/pankajchakrabarty/Desktop/symptom-checker-frontend/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport SymptomInput from \"./components/SymptomInput\";\nimport ResultsDisplay from \"./components/ResultsDisplay\";\nimport Disclaimer from \"./components/Disclaimer\";\n\nexport default function App() {\n  const [conversation, setConversation] = useState([]);\n  const [displayedMessages, setDisplayedMessages] = useState([]);\n  const [userInput, setUserInput] = useState(\"\");\n  const [results, setResults] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  // Animate conversation messages step by step\n  useEffect(() => {\n    if (conversation.length === 0) {\n      setDisplayedMessages([]);\n      return;\n    }\n\n    let index = 0;\n    setDisplayedMessages([]);\n\n    const interval = setInterval(() => {\n      if (index >= conversation.length) {\n        clearInterval(interval);\n        return;\n      }\n      const msg = conversation[index];\n      if (msg && msg.role && msg.text) {\n        setDisplayedMessages((prev) => [...prev, msg]);\n      }\n      index++;\n    }, 400);\n\n    return () => clearInterval(interval);\n  }, [conversation]);\n\n  const handleSendMessage = async () => {\n    if (!userInput.trim()) return;\n\n    // Reset state for a new check\n    setConversation([]);\n    setDisplayedMessages([]);\n    setResults([]);\n    setLoading(true);\n\n    try {\n      // Call the new, more intelligent endpoint\n      const res = await fetch(\"http://localhost:5001/api/check-symptoms\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ userMessage: userInput }),\n      });\n\n      const data = await res.json();\n\n      if (data.conversation) {\n        setConversation(data.conversation);\n      }\n\n      if (data.possible_conditions?.length) {\n        setResults(data.possible_conditions);\n      }\n    } catch (err) {\n      console.error(\"Error fetching analysis:\", err);\n      setConversation([{\n        role: \"assistant\",\n        text: \"Sorry, an error occurred. Please try again.\"\n      }]);\n    } finally {\n      setLoading(false);\n      setUserInput(\"\");\n    }\n  };\n\n  return (\n    <div className=\"app-container\">\n      <h1 className=\"app-title\">Medichat Symptom Checker</h1>\n      <p className=\"app-subtitle\">\n        Describe your symptoms naturally. The assistant will respond step-by-step.\n      </p>\n\n      {displayedMessages.length > 0 && (\n        <div className=\"conversation-box\">\n          {displayedMessages\n            .filter(msg => msg && msg.role && msg.text)\n            .map((msg, idx) => (\n              <div\n                key={idx}\n                className={`chat-message ${msg.role === \"assistant\" ? \"ai-message\" : \"user-message\"}`}\n              >\n                {msg.role === \"assistant\" && <span className=\"ai-icon\">ðŸ¤–</span>}\n                {msg.role === \"user\" && <span className=\"user-icon\">ðŸ§‘</span>}\n                {msg.text}\n              </div>\n            ))}\n        </div>\n      )}\n\n      {loading && (\n        <div className=\"processing\">\n          <span className=\"ai-icon\">ðŸ¤–</span> Thinking...\n        </div>\n      )}\n\n      <SymptomInput\n        symptoms={userInput}\n        setSymptoms={setUserInput}\n        onCheck={handleSendMessage}\n      />\n\n      {!loading && results.length > 0 && <ResultsDisplay results={results} />}\n\n      <Disclaimer />\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}