{"ast":null,"code":"var _jsxFileName = \"/Users/pankajchakrabarty/Desktop/symptom-checker-frontend/src/App.js\",\n  _s = $RefreshSig$();\n// src/App.js\nimport React, { useState } from 'react';\nimport SymptomInput from './components/SymptomInput';\nimport ResultsDisplay from './components/ResultsDisplay';\nimport Disclaimer from './components/Disclaimer';\nimport './App.css'; // We'll add some basic styles here later\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [symptomsInput, setSymptomsInput] = useState('');\n  const [results, setResults] = useState(null); // Will store the array of potential conditions\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const handleSubmitSymptoms = async symptomText => {\n    setSymptomsInput(symptomText);\n    setIsLoading(true);\n    setError(null); // Clear previous errors\n    setResults(null); // Clear previous results\n\n    try {\n      // --- This is where you'd call your backend API ---\n      const response = await fetch('/api/check-symptoms', {\n        // Adjust URL as needed\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          symptoms: symptomText\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const data = await response.json();\n      setResults(data.conditions); // Assuming your backend returns { conditions: [...] }\n    } catch (err) {\n      console.error(\"Error fetching symptom results:\", err);\n      setError(\"Failed to get results. Please try again.\");\n      setResults([]); // Set to empty array to show no results on error\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"AI Symptom Checker\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"app-tagline\",\n      children: \"Describe your symptoms naturally, and we'll suggest potential conditions.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SymptomInput, {\n      onSubmit: handleSubmitSymptoms,\n      isLoading: isLoading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"loading-message\",\n      children: \"Processing your symptoms with AI...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 21\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }, this), results && results.length > 0 && /*#__PURE__*/_jsxDEV(ResultsDisplay, {\n      results: results\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this), results && results.length === 0 && !isLoading && !error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"no-results-message\",\n      children: \"No potential conditions found based on your description. Please try being more specific or consult a doctor.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Disclaimer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"klMdSyuII6mArJgUggaNTQNYZPg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","SymptomInput","ResultsDisplay","Disclaimer","jsxDEV","_jsxDEV","App","_s","symptomsInput","setSymptomsInput","results","setResults","isLoading","setIsLoading","error","setError","handleSubmitSymptoms","symptomText","response","fetch","method","headers","body","JSON","stringify","symptoms","ok","Error","status","data","json","conditions","err","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","length","_c","$RefreshReg$"],"sources":["/Users/pankajchakrabarty/Desktop/symptom-checker-frontend/src/App.js"],"sourcesContent":["// src/App.js\nimport React, { useState } from 'react';\nimport SymptomInput from './components/SymptomInput';\nimport ResultsDisplay from './components/ResultsDisplay';\nimport Disclaimer from './components/Disclaimer';\nimport './App.css'; // We'll add some basic styles here later\n\nfunction App() {\n  const [symptomsInput, setSymptomsInput] = useState('');\n  const [results, setResults] = useState(null); // Will store the array of potential conditions\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const handleSubmitSymptoms = async (symptomText) => {\n    setSymptomsInput(symptomText);\n    setIsLoading(true);\n    setError(null); // Clear previous errors\n    setResults(null); // Clear previous results\n\n    try {\n      // --- This is where you'd call your backend API ---\n      const response = await fetch('/api/check-symptoms', { // Adjust URL as needed\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ symptoms: symptomText }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      setResults(data.conditions); // Assuming your backend returns { conditions: [...] }\n    } catch (err) {\n      console.error(\"Error fetching symptom results:\", err);\n      setError(\"Failed to get results. Please try again.\");\n      setResults([]); // Set to empty array to show no results on error\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"app-container\">\n      <h1>AI Symptom Checker</h1>\n      <p className=\"app-tagline\">Describe your symptoms naturally, and we'll suggest potential conditions.</p>\n\n      <SymptomInput\n        onSubmit={handleSubmitSymptoms}\n        isLoading={isLoading}\n      />\n\n      {isLoading && <p className=\"loading-message\">Processing your symptoms with AI...</p>}\n      {error && <p className=\"error-message\">{error}</p>}\n\n      {results && results.length > 0 && (\n        <ResultsDisplay results={results} />\n      )}\n      {results && results.length === 0 && !isLoading && !error && (\n        <p className=\"no-results-message\">No potential conditions found based on your description. Please try being more specific or consult a doctor.</p>\n      )}\n\n      <Disclaimer />\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,YAAY,MAAM,2BAA2B;AACpD,OAAOC,cAAc,MAAM,6BAA6B;AACxD,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAO,WAAW,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEpB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACY,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACc,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMgB,oBAAoB,GAAG,MAAOC,WAAW,IAAK;IAClDR,gBAAgB,CAACQ,WAAW,CAAC;IAC7BJ,YAAY,CAAC,IAAI,CAAC;IAClBE,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;IAChBJ,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;;IAElB,IAAI;MACF;MACA,MAAMO,QAAQ,GAAG,MAAMC,KAAK,CAAC,qBAAqB,EAAE;QAAE;QACpDC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEC,QAAQ,EAAER;QAAY,CAAC;MAChD,CAAC,CAAC;MAEF,IAAI,CAACC,QAAQ,CAACQ,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBT,QAAQ,CAACU,MAAM,EAAE,CAAC;MAC3D;MAEA,MAAMC,IAAI,GAAG,MAAMX,QAAQ,CAACY,IAAI,CAAC,CAAC;MAClCnB,UAAU,CAACkB,IAAI,CAACE,UAAU,CAAC,CAAC,CAAC;IAC/B,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZC,OAAO,CAACnB,KAAK,CAAC,iCAAiC,EAAEkB,GAAG,CAAC;MACrDjB,QAAQ,CAAC,0CAA0C,CAAC;MACpDJ,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC;IAClB,CAAC,SAAS;MACRE,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAED,oBACER,OAAA;IAAK6B,SAAS,EAAC,eAAe;IAAAC,QAAA,gBAC5B9B,OAAA;MAAA8B,QAAA,EAAI;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC3BlC,OAAA;MAAG6B,SAAS,EAAC,aAAa;MAAAC,QAAA,EAAC;IAAyE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAExGlC,OAAA,CAACJ,YAAY;MACXuC,QAAQ,EAAExB,oBAAqB;MAC/BJ,SAAS,EAAEA;IAAU;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtB,CAAC,EAED3B,SAAS,iBAAIP,OAAA;MAAG6B,SAAS,EAAC,iBAAiB;MAAAC,QAAA,EAAC;IAAmC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,EACnFzB,KAAK,iBAAIT,OAAA;MAAG6B,SAAS,EAAC,eAAe;MAAAC,QAAA,EAAErB;IAAK;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAEjD7B,OAAO,IAAIA,OAAO,CAAC+B,MAAM,GAAG,CAAC,iBAC5BpC,OAAA,CAACH,cAAc;MAACQ,OAAO,EAAEA;IAAQ;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CACpC,EACA7B,OAAO,IAAIA,OAAO,CAAC+B,MAAM,KAAK,CAAC,IAAI,CAAC7B,SAAS,IAAI,CAACE,KAAK,iBACtDT,OAAA;MAAG6B,SAAS,EAAC,oBAAoB;MAAAC,QAAA,EAAC;IAA4G;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAClJ,eAEDlC,OAAA,CAACF,UAAU;MAAAiC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACX,CAAC;AAEV;AAAChC,EAAA,CA5DQD,GAAG;AAAAoC,EAAA,GAAHpC,GAAG;AA8DZ,eAAeA,GAAG;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}