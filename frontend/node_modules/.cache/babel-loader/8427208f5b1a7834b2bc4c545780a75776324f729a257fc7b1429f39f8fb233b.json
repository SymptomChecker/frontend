{"ast":null,"code":"var _jsxFileName = \"/Users/pankajchakrabarty/Desktop/symptom-checker-frontend/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport SymptomInput from \"./components/SymptomInput\";\nimport ResultsDisplay from \"./components/ResultsDisplay\";\nimport Disclaimer from \"./components/Disclaimer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  const [sessionId, setSessionId] = useState(null);\n  const [conversation, setConversation] = useState([]);\n  const [displayedMessages, setDisplayedMessages] = useState([]);\n  const [userInput, setUserInput] = useState(\"\");\n  const [results, setResults] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  // Display messages step-by-step for chat effect\n  useEffect(() => {\n    if (conversation.length === 0) {\n      setDisplayedMessages([]);\n      return;\n    }\n    let index = 0;\n    setDisplayedMessages([]);\n    const interval = setInterval(() => {\n      if (index >= conversation.length) {\n        clearInterval(interval);\n        return;\n      }\n      setDisplayedMessages(prev => [...prev, conversation[index]]);\n      index++;\n    }, 500);\n    return () => clearInterval(interval);\n  }, [conversation]);\n  const handleSendMessage = async () => {\n    if (!userInput.trim()) return;\n    setConversation(prev => [...prev, {\n      role: \"user\",\n      text: userInput\n    }]);\n    setLoading(true);\n    try {\n      const res = await fetch(\"http://localhost:5001/api/next-step\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          sessionId,\n          userMessage: userInput\n        })\n      });\n      const data = await res.json();\n\n      // Save sessionId if first message\n      if (!sessionId && data.sessionId) setSessionId(data.sessionId);\n      setConversation(prev => [...prev, {\n        role: \"assistant\",\n        text: data.assistantMessage\n      }]);\n      if (data.done) {\n        const finalResults = data.possible_conditions.map(cond => ({\n          condition: cond,\n          description: \"Derived from dataset conversation\",\n          confidence: 60 + Math.floor(Math.random() * 30)\n        }));\n        setResults(finalResults);\n      }\n    } catch (err) {\n      console.error(err);\n    } finally {\n      setLoading(false);\n      setUserInput(\"\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"app-title\",\n      children: \"Medichat Symptom Checker\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"app-subtitle\",\n      children: \"Enter your symptoms and go through a step-by-step Q&A simulation.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SymptomInput, {\n      symptoms: userInput,\n      setSymptoms: setUserInput,\n      onCheck: handleSendMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"processing\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"ai-icon\",\n        children: \"\\uD83E\\uDD16\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this), \" Thinking...\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this), displayedMessages.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"conversation-box\",\n      children: displayedMessages.filter(msg => msg && msg.role && msg.text) // <-- ignore invalid messages\n      .map((msg, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chat-message ${msg.role === \"assistant\" ? \"ai-message\" : \"user-message\"}`,\n        children: [msg.role === \"assistant\" && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"ai-icon\",\n          children: \"\\uD83E\\uDD16\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 40\n        }, this), msg.role === \"user\" && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"user-icon\",\n          children: \"\\uD83E\\uDDD1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 35\n        }, this), msg.text]\n      }, idx, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 3\n    }, this), !loading && results.length > 0 && /*#__PURE__*/_jsxDEV(ResultsDisplay, {\n      results: results\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 42\n    }, this), /*#__PURE__*/_jsxDEV(Disclaimer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"PKTlwvc5pGWqpbgGZ6Jbfq5xiRM=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","SymptomInput","ResultsDisplay","Disclaimer","jsxDEV","_jsxDEV","App","_s","sessionId","setSessionId","conversation","setConversation","displayedMessages","setDisplayedMessages","userInput","setUserInput","results","setResults","loading","setLoading","length","index","interval","setInterval","clearInterval","prev","handleSendMessage","trim","role","text","res","fetch","method","headers","body","JSON","stringify","userMessage","data","json","assistantMessage","done","finalResults","possible_conditions","map","cond","condition","description","confidence","Math","floor","random","err","console","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","symptoms","setSymptoms","onCheck","filter","msg","idx","_c","$RefreshReg$"],"sources":["/Users/pankajchakrabarty/Desktop/symptom-checker-frontend/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport SymptomInput from \"./components/SymptomInput\";\nimport ResultsDisplay from \"./components/ResultsDisplay\";\nimport Disclaimer from \"./components/Disclaimer\";\n\nexport default function App() {\n  const [sessionId, setSessionId] = useState(null);\n  const [conversation, setConversation] = useState([]);\n  const [displayedMessages, setDisplayedMessages] = useState([]);\n  const [userInput, setUserInput] = useState(\"\");\n  const [results, setResults] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  // Display messages step-by-step for chat effect\n  useEffect(() => {\n    if (conversation.length === 0) {\n      setDisplayedMessages([]);\n      return;\n    }\n\n    let index = 0;\n    setDisplayedMessages([]);\n\n    const interval = setInterval(() => {\n      if (index >= conversation.length) {\n        clearInterval(interval);\n        return;\n      }\n      setDisplayedMessages((prev) => [...prev, conversation[index]]);\n      index++;\n    }, 500);\n\n    return () => clearInterval(interval);\n  }, [conversation]);\n\n  const handleSendMessage = async () => {\n    if (!userInput.trim()) return;\n    setConversation(prev => [...prev, { role: \"user\", text: userInput }]);\n    setLoading(true);\n\n    try {\n      const res = await fetch(\"http://localhost:5001/api/next-step\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ sessionId, userMessage: userInput }),\n      });\n\n      const data = await res.json();\n\n      // Save sessionId if first message\n      if (!sessionId && data.sessionId) setSessionId(data.sessionId);\n\n      setConversation(prev => [\n        ...prev,\n        { role: \"assistant\", text: data.assistantMessage }\n      ]);\n\n      if (data.done) {\n        const finalResults = data.possible_conditions.map(cond => ({\n          condition: cond,\n          description: \"Derived from dataset conversation\",\n          confidence: 60 + Math.floor(Math.random() * 30)\n        }));\n        setResults(finalResults);\n      }\n\n    } catch (err) {\n      console.error(err);\n    } finally {\n      setLoading(false);\n      setUserInput(\"\");\n    }\n  };\n\n  return (\n    <div className=\"app-container\">\n      <h1 className=\"app-title\">Medichat Symptom Checker</h1>\n      <p className=\"app-subtitle\">\n        Enter your symptoms and go through a step-by-step Q&A simulation.\n      </p>\n\n      <SymptomInput\n        symptoms={userInput}\n        setSymptoms={setUserInput}\n        onCheck={handleSendMessage}\n      />\n\n      {loading && (\n        <div className=\"processing\">\n          <span className=\"ai-icon\">ðŸ¤–</span> Thinking...\n        </div>\n      )}\n\n{displayedMessages.length > 0 && (\n  <div className=\"conversation-box\">\n    {displayedMessages\n      .filter(msg => msg && msg.role && msg.text) // <-- ignore invalid messages\n      .map((msg, idx) => (\n        <div\n          key={idx}\n          className={`chat-message ${msg.role === \"assistant\" ? \"ai-message\" : \"user-message\"}`}\n        >\n          {msg.role === \"assistant\" && <span className=\"ai-icon\">ðŸ¤–</span>}\n          {msg.role === \"user\" && <span className=\"user-icon\">ðŸ§‘</span>}\n          {msg.text}\n        </div>\n      ))}\n  </div>\n)}\n\n      {!loading && results.length > 0 && <ResultsDisplay results={results} />}\n\n      <Disclaimer />\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}