{"ast":null,"code":"var _jsxFileName = \"/Users/pankajchakrabarty/Desktop/symptom-checker-frontend/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Select from \"react-select\";\nimport axios from \"axios\";\nimport \"./App.css\";\nimport SymptomInput from \"./components/SymptomInput\";\nimport ResultsDisplay from \"./components/ResultsDisplay\";\nimport Disclaimer from \"./components/Disclaimer\";\n\n// Example list of languages (50+ can be added)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst languages = [{\n  value: \"en-US\",\n  label: \"English\"\n}, {\n  value: \"es-ES\",\n  label: \"Spanish\"\n}, {\n  value: \"fr-FR\",\n  label: \"French\"\n}, {\n  value: \"de-DE\",\n  label: \"German\"\n}, {\n  value: \"hi-IN\",\n  label: \"Hindi\"\n}, {\n  value: \"zh-CN\",\n  label: \"Chinese (Simplified)\"\n}, {\n  value: \"ar-SA\",\n  label: \"Arabic\"\n}\n// ... add more languages as needed\n];\nexport default function App() {\n  _s();\n  const [sessionId, setSessionId] = useState(null);\n  const [conversation, setConversation] = useState([]);\n  const [displayedMessages, setDisplayedMessages] = useState([]);\n  const [userInput, setUserInput] = useState(\"\");\n  const [results, setResults] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [selectedLanguage, setSelectedLanguage] = useState(languages[0]); // default English\n\n  // Start session on first render\n  useEffect(() => {\n    const startSession = async () => {\n      const res = await fetch(\"http://localhost:5001/api/start-session\", {\n        method: \"POST\"\n      });\n      const data = await res.json();\n      setSessionId(data.sessionId);\n    };\n    startSession();\n  }, []);\n\n  // Animate conversation messages\n  useEffect(() => {\n    if (conversation.length === 0) return;\n    let index = displayedMessages.length;\n    if (index >= conversation.length) return;\n    const interval = setInterval(() => {\n      if (index >= conversation.length) {\n        clearInterval(interval);\n        return;\n      }\n      const msg = conversation[index];\n      if (msg && msg.role && msg.text) {\n        setDisplayedMessages(prev => [...prev, msg]);\n      }\n      index++;\n    }, 400);\n    return () => clearInterval(interval);\n  }, [conversation, displayedMessages.length]);\n\n  // Handle sending message (user text)\n  const handleSendMessage = async (text = null) => {\n    const messageToSend = text !== null && text !== void 0 ? text : userInput;\n    if (!messageToSend.trim() || !sessionId) return;\n    setConversation(prev => [...prev, {\n      role: \"user\",\n      text: messageToSend\n    }]);\n    setLoading(true);\n    setUserInput(\"\"); // Clear input\n\n    try {\n      var _data$possible_condit;\n      const res = await fetch(\"http://localhost:5001/api/next-step\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          sessionId,\n          userMessage: messageToSend\n        })\n      });\n      const data = await res.json();\n      if (data.assistantMessage) {\n        setConversation(prev => [...prev, {\n          role: \"assistant\",\n          text: data.assistantMessage\n        }]);\n      }\n      if (data.done && (_data$possible_condit = data.possible_conditions) !== null && _data$possible_condit !== void 0 && _data$possible_condit.length) {\n        const finalResults = data.possible_conditions.map(cond => ({\n          condition: cond,\n          description: \"Derived from dataset conversation\",\n          confidence: 60 + Math.floor(Math.random() * 30)\n        }));\n        setResults(finalResults);\n      }\n    } catch (err) {\n      console.error(\"Error fetching assistant response:\", err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Translate text to English\n  const translateToEnglish = async (text, sourceLang) => {\n    try {\n      const res = await axios.post(\"https://api.mymemory.translated.net/get\", null, {\n        params: {\n          q: text,\n          langpair: `${sourceLang}|en`\n        }\n      });\n      return res.data.responseData.translatedText;\n    } catch (err) {\n      console.error(\"Translation error:\", err);\n      return text; // fallback\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"space-between\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"app-title\",\n        children: \"Medichat Symptom Checker\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"200px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(Select, {\n          options: languages,\n          value: selectedLanguage,\n          onChange: setSelectedLanguage,\n          isSearchable: true,\n          placeholder: \"Select language...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"app-subtitle\",\n      children: \"Describe your symptoms naturally. The assistant will respond step-by-step.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), displayedMessages.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"conversation-box\",\n      children: displayedMessages.map((msg, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chat-message ${msg.role === \"assistant\" ? \"ai-message\" : \"user-message\"}`,\n        children: [msg.role === \"assistant\" && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"ai-icon\",\n          children: \"\\uD83E\\uDD16\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 44\n        }, this), msg.role === \"user\" && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"user-icon\",\n          children: \"\\uD83E\\uDDD1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 39\n        }, this), msg.text]\n      }, idx, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"processing\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"ai-icon\",\n        children: \"\\uD83E\\uDD16\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 11\n      }, this), \" Thinking...\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(SymptomInput, {\n      symptoms: userInput,\n      setSymptoms: setUserInput,\n      onCheck: async spokenText => {\n        // Translate if not English\n        let englishText = spokenText;\n        if (selectedLanguage.value !== \"en-US\") {\n          englishText = await translateToEnglish(spokenText, selectedLanguage.value.split(\"-\")[0]);\n        }\n        handleSendMessage(englishText);\n      },\n      selectedLanguage: selectedLanguage.value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), !loading && results.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"results-container-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"results-label\",\n        children: \"Results:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ResultsDisplay, {\n        results: results\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Disclaimer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"EPr+PtI1h/uvWbIjyEizAZ6NM5s=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Select","axios","SymptomInput","ResultsDisplay","Disclaimer","jsxDEV","_jsxDEV","languages","value","label","App","_s","sessionId","setSessionId","conversation","setConversation","displayedMessages","setDisplayedMessages","userInput","setUserInput","results","setResults","loading","setLoading","selectedLanguage","setSelectedLanguage","startSession","res","fetch","method","data","json","length","index","interval","setInterval","clearInterval","msg","role","text","prev","handleSendMessage","messageToSend","trim","_data$possible_condit","headers","body","JSON","stringify","userMessage","assistantMessage","done","possible_conditions","finalResults","map","cond","condition","description","confidence","Math","floor","random","err","console","error","translateToEnglish","sourceLang","post","params","q","langpair","responseData","translatedText","className","children","style","display","alignItems","justifyContent","fileName","_jsxFileName","lineNumber","columnNumber","width","options","onChange","isSearchable","placeholder","idx","symptoms","setSymptoms","onCheck","spokenText","englishText","split","_c","$RefreshReg$"],"sources":["/Users/pankajchakrabarty/Desktop/symptom-checker-frontend/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Select from \"react-select\";\nimport axios from \"axios\";\nimport \"./App.css\";\nimport SymptomInput from \"./components/SymptomInput\";\nimport ResultsDisplay from \"./components/ResultsDisplay\";\nimport Disclaimer from \"./components/Disclaimer\";\n\n// Example list of languages (50+ can be added)\nconst languages = [\n  { value: \"en-US\", label: \"English\" },\n  { value: \"es-ES\", label: \"Spanish\" },\n  { value: \"fr-FR\", label: \"French\" },\n  { value: \"de-DE\", label: \"German\" },\n  { value: \"hi-IN\", label: \"Hindi\" },\n  { value: \"zh-CN\", label: \"Chinese (Simplified)\" },\n  { value: \"ar-SA\", label: \"Arabic\" },\n  // ... add more languages as needed\n];\n\nexport default function App() {\n  const [sessionId, setSessionId] = useState(null);\n  const [conversation, setConversation] = useState([]);\n  const [displayedMessages, setDisplayedMessages] = useState([]);\n  const [userInput, setUserInput] = useState(\"\");\n  const [results, setResults] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [selectedLanguage, setSelectedLanguage] = useState(languages[0]); // default English\n\n  // Start session on first render\n  useEffect(() => {\n    const startSession = async () => {\n      const res = await fetch(\"http://localhost:5001/api/start-session\", { method: \"POST\" });\n      const data = await res.json();\n      setSessionId(data.sessionId);\n    };\n    startSession();\n  }, []);\n\n  // Animate conversation messages\n  useEffect(() => {\n    if (conversation.length === 0) return;\n    let index = displayedMessages.length;\n    if (index >= conversation.length) return;\n\n    const interval = setInterval(() => {\n      if (index >= conversation.length) {\n        clearInterval(interval);\n        return;\n      }\n      const msg = conversation[index];\n      if (msg && msg.role && msg.text) {\n        setDisplayedMessages((prev) => [...prev, msg]);\n      }\n      index++;\n    }, 400);\n\n    return () => clearInterval(interval);\n  }, [conversation, displayedMessages.length]);\n\n  // Handle sending message (user text)\n  const handleSendMessage = async (text = null) => {\n    const messageToSend = text ?? userInput;\n    if (!messageToSend.trim() || !sessionId) return;\n\n    setConversation(prev => [...prev, { role: \"user\", text: messageToSend }]);\n    setLoading(true);\n    setUserInput(\"\"); // Clear input\n\n    try {\n      const res = await fetch(\"http://localhost:5001/api/next-step\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ sessionId, userMessage: messageToSend }),\n      });\n\n      const data = await res.json();\n\n      if (data.assistantMessage) {\n        setConversation(prev => [...prev, { role: \"assistant\", text: data.assistantMessage }]);\n      }\n\n      if (data.done && data.possible_conditions?.length) {\n        const finalResults = data.possible_conditions.map(cond => ({\n          condition: cond,\n          description: \"Derived from dataset conversation\",\n          confidence: 60 + Math.floor(Math.random() * 30)\n        }));\n        setResults(finalResults);\n      }\n    } catch (err) {\n      console.error(\"Error fetching assistant response:\", err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Translate text to English\n  const translateToEnglish = async (text, sourceLang) => {\n    try {\n      const res = await axios.post(\"https://api.mymemory.translated.net/get\", null, {\n        params: { q: text, langpair: `${sourceLang}|en` }\n      });\n      return res.data.responseData.translatedText;\n    } catch (err) {\n      console.error(\"Translation error:\", err);\n      return text; // fallback\n    }\n  };\n\n  return (\n    <div className=\"app-container\">\n      <div style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"space-between\" }}>\n        <h1 className=\"app-title\">Medichat Symptom Checker</h1>\n        <div style={{ width: \"200px\" }}>\n          <Select\n            options={languages}\n            value={selectedLanguage}\n            onChange={setSelectedLanguage}\n            isSearchable\n            placeholder=\"Select language...\"\n          />\n        </div>\n      </div>\n\n      <p className=\"app-subtitle\">\n        Describe your symptoms naturally. The assistant will respond step-by-step.\n      </p>\n\n      {displayedMessages.length > 0 && (\n        <div className=\"conversation-box\">\n          {displayedMessages.map((msg, idx) => (\n            <div\n              key={idx}\n              className={`chat-message ${msg.role === \"assistant\" ? \"ai-message\" : \"user-message\"}`}\n            >\n              {msg.role === \"assistant\" && <span className=\"ai-icon\">🤖</span>}\n              {msg.role === \"user\" && <span className=\"user-icon\">🧑</span>}\n              {msg.text}\n            </div>\n          ))}\n        </div>\n      )}\n\n      {loading && (\n        <div className=\"processing\">\n          <span className=\"ai-icon\">🤖</span> Thinking...\n        </div>\n      )}\n\n      <SymptomInput\n        symptoms={userInput}\n        setSymptoms={setUserInput}\n        onCheck={async (spokenText) => {\n          // Translate if not English\n          let englishText = spokenText;\n          if (selectedLanguage.value !== \"en-US\") {\n            englishText = await translateToEnglish(spokenText, selectedLanguage.value.split(\"-\")[0]);\n          }\n          handleSendMessage(englishText);\n        }}\n        selectedLanguage={selectedLanguage.value}\n      />\n\n      {!loading && results.length > 0 && (\n        <div className=\"results-container-wrapper\">\n          <div className=\"results-label\">Results:</div>\n          <ResultsDisplay results={results} />\n        </div>\n      )}\n\n      <Disclaimer />\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}