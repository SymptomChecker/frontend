{"ast":null,"code":"var _jsxFileName = \"/Users/pankajchakrabarty/Desktop/symptom-checker-frontend/frontend/src/components/SymptomInput.js\",\n  _s = $RefreshSig$();\n// SymptomInput.js\nimport React, { useState, useEffect } from \"react\";\nimport \"./SymptomInput.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SymptomInput({\n  symptoms,\n  setSymptoms,\n  onCheck\n}) {\n  _s();\n  const [suggestions, setSuggestions] = useState([]);\n\n  // Fetch suggestions from backend\n  const fetchSuggestions = async currentSymptoms => {\n    if (!currentSymptoms.trim()) return setSuggestions([]);\n    try {\n      const response = await fetch(\"http://localhost:5001/api/symptom-suggestions\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          symptoms: currentSymptoms.split(\",\").map(s => s.trim())\n        })\n      });\n      const data = await response.json();\n      setSuggestions(data.suggestions || []);\n    } catch (error) {\n      console.error(\"Error fetching suggestions:\", error);\n      setSuggestions([]);\n    }\n  };\n\n  // Update suggestions whenever input changes\n  const handleInputChange = e => {\n    const value = e.target.value;\n    setSymptoms(value);\n    fetchSuggestions(value);\n  };\n\n  // Add a suggestion to the input\n  const handleSuggestionClick = suggestion => {\n    setSymptoms(prev => prev ? prev.split(\",\").map(s => s.trim()).concat(suggestion).join(\", \") : suggestion);\n    setSuggestions([]); // clear suggestions after selection\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"symptom-input-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n      placeholder: \"Enter symptoms separated by commas\",\n      value: symptoms,\n      onChange: handleInputChange,\n      rows: 4\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"suggestions-container\",\n      children: suggestions.map((s, i) => /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"suggestion-item\",\n        onClick: () => handleSuggestionClick(s),\n        children: s\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onCheck,\n      disabled: !symptoms.trim(),\n      children: \"Check Symptoms\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n_s(SymptomInput, \"xLFRUKi5CexG/Qcuhka4a4H1SoY=\");\n_c = SymptomInput;\nvar _c;\n$RefreshReg$(_c, \"SymptomInput\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","SymptomInput","symptoms","setSymptoms","onCheck","_s","suggestions","setSuggestions","fetchSuggestions","currentSymptoms","trim","response","fetch","method","headers","body","JSON","stringify","split","map","s","data","json","error","console","handleInputChange","e","value","target","handleSuggestionClick","suggestion","prev","concat","join","className","children","placeholder","onChange","rows","fileName","_jsxFileName","lineNumber","columnNumber","i","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/pankajchakrabarty/Desktop/symptom-checker-frontend/frontend/src/components/SymptomInput.js"],"sourcesContent":["// SymptomInput.js\nimport React, { useState, useEffect } from \"react\";\nimport \"./SymptomInput.css\";\n\nexport default function SymptomInput({ symptoms, setSymptoms, onCheck }) {\n  const [suggestions, setSuggestions] = useState([]);\n\n  // Fetch suggestions from backend\n  const fetchSuggestions = async (currentSymptoms) => {\n    if (!currentSymptoms.trim()) return setSuggestions([]);\n\n    try {\n      const response = await fetch(\"http://localhost:5001/api/symptom-suggestions\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          symptoms: currentSymptoms.split(\",\").map((s) => s.trim()),\n        }),\n      });\n\n      const data = await response.json();\n      setSuggestions(data.suggestions || []);\n    } catch (error) {\n      console.error(\"Error fetching suggestions:\", error);\n      setSuggestions([]);\n    }\n  };\n\n  // Update suggestions whenever input changes\n  const handleInputChange = (e) => {\n    const value = e.target.value;\n    setSymptoms(value);\n    fetchSuggestions(value);\n  };\n\n  // Add a suggestion to the input\n  const handleSuggestionClick = (suggestion) => {\n    setSymptoms((prev) =>\n      prev\n        ? prev\n            .split(\",\")\n            .map((s) => s.trim())\n            .concat(suggestion)\n            .join(\", \")\n        : suggestion\n    );\n    setSuggestions([]); // clear suggestions after selection\n  };\n\n  return (\n    <div className=\"symptom-input-container\">\n      <textarea\n        placeholder=\"Enter symptoms separated by commas\"\n        value={symptoms}\n        onChange={handleInputChange}\n        rows={4}\n      />\n\n      <div className=\"suggestions-container\">\n        {suggestions.map((s, i) => (\n          <span\n            key={i}\n            className=\"suggestion-item\"\n            onClick={() => handleSuggestionClick(s)}\n          >\n            {s}\n          </span>\n        ))}\n      </div>\n\n      <button onClick={onCheck} disabled={!symptoms.trim()}>\n        Check Symptoms\n      </button>\n    </div>\n  );\n}\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5B,eAAe,SAASC,YAAYA,CAAC;EAAEC,QAAQ;EAAEC,WAAW;EAAEC;AAAQ,CAAC,EAAE;EAAAC,EAAA;EACvE,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;;EAElD;EACA,MAAMW,gBAAgB,GAAG,MAAOC,eAAe,IAAK;IAClD,IAAI,CAACA,eAAe,CAACC,IAAI,CAAC,CAAC,EAAE,OAAOH,cAAc,CAAC,EAAE,CAAC;IAEtD,IAAI;MACF,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,+CAA+C,EAAE;QAC5EC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBf,QAAQ,EAAEO,eAAe,CAACS,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAACV,IAAI,CAAC,CAAC;QAC1D,CAAC;MACH,CAAC,CAAC;MAEF,MAAMW,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;MAClCf,cAAc,CAACc,IAAI,CAACf,WAAW,IAAI,EAAE,CAAC;IACxC,CAAC,CAAC,OAAOiB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnDhB,cAAc,CAAC,EAAE,CAAC;IACpB;EACF,CAAC;;EAED;EACA,MAAMkB,iBAAiB,GAAIC,CAAC,IAAK;IAC/B,MAAMC,KAAK,GAAGD,CAAC,CAACE,MAAM,CAACD,KAAK;IAC5BxB,WAAW,CAACwB,KAAK,CAAC;IAClBnB,gBAAgB,CAACmB,KAAK,CAAC;EACzB,CAAC;;EAED;EACA,MAAME,qBAAqB,GAAIC,UAAU,IAAK;IAC5C3B,WAAW,CAAE4B,IAAI,IACfA,IAAI,GACAA,IAAI,CACDb,KAAK,CAAC,GAAG,CAAC,CACVC,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAACV,IAAI,CAAC,CAAC,CAAC,CACpBsB,MAAM,CAACF,UAAU,CAAC,CAClBG,IAAI,CAAC,IAAI,CAAC,GACbH,UACN,CAAC;IACDvB,cAAc,CAAC,EAAE,CAAC,CAAC,CAAC;EACtB,CAAC;EAED,oBACEP,OAAA;IAAKkC,SAAS,EAAC,yBAAyB;IAAAC,QAAA,gBACtCnC,OAAA;MACEoC,WAAW,EAAC,oCAAoC;MAChDT,KAAK,EAAEzB,QAAS;MAChBmC,QAAQ,EAAEZ,iBAAkB;MAC5Ba,IAAI,EAAE;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACT,CAAC,eAEF1C,OAAA;MAAKkC,SAAS,EAAC,uBAAuB;MAAAC,QAAA,EACnC7B,WAAW,CAACa,GAAG,CAAC,CAACC,CAAC,EAAEuB,CAAC,kBACpB3C,OAAA;QAEEkC,SAAS,EAAC,iBAAiB;QAC3BU,OAAO,EAAEA,CAAA,KAAMf,qBAAqB,CAACT,CAAC,CAAE;QAAAe,QAAA,EAEvCf;MAAC,GAJGuB,CAAC;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKF,CACP;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eAEN1C,OAAA;MAAQ4C,OAAO,EAAExC,OAAQ;MAACyC,QAAQ,EAAE,CAAC3C,QAAQ,CAACQ,IAAI,CAAC,CAAE;MAAAyB,QAAA,EAAC;IAEtD;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV;AAACrC,EAAA,CAvEuBJ,YAAY;AAAA6C,EAAA,GAAZ7C,YAAY;AAAA,IAAA6C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}