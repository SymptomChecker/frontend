{"ast":null,"code":"var _jsxFileName = \"/Users/pankajchakrabarty/Desktop/symptom-checker-frontend/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [symptoms, setSymptoms] = useState(\"\");\n  const [results, setResults] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  // Existing function\n  const handleCheckSymptoms = async () => {\n    if (!symptoms.trim()) return;\n    setLoading(true);\n    try {\n      const response = await fetch(\"http://localhost:5001/api/check-symptoms\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          symptoms\n        })\n      });\n      const data = await response.json();\n      setResults(data.results || []);\n    } catch (error) {\n      console.error(\"Error fetching results:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // New function: Clear symptoms and results\n  const handleClear = () => {\n    setSymptoms(\"\");\n    setResults([]);\n  };\n\n  // New function: Fetch related symptom suggestions\n  const handleFetchSuggestions = async () => {\n    if (!symptoms.trim()) return;\n    setLoading(true);\n    try {\n      const response = await fetch(\"http://localhost:5001/api/symptom-suggestions\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          symptoms\n        })\n      });\n      const data = await response.json();\n      // This assumes the API returns something like { suggestions: [\"headache\", \"fever\"] }\n      alert(\"Suggested related symptoms: \" + (data.suggestions || []).join(\", \"));\n    } catch (error) {\n      console.error(\"Error fetching suggestions:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"app-title\",\n      children: \"Medichat Symptom Checker\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"app-subtitle\",\n      children: \"Describe your symptoms naturally, and we'll suggest potential conditions.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SymptomInput, {\n      symptoms: symptoms,\n      setSymptoms: setSymptoms,\n      onCheck: handleCheckSymptoms\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"additional-actions\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleClear,\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleFetchSuggestions,\n        children: \"Get Symptom Suggestions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"processing\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"ai-icon\",\n        children: \"\\uD83E\\uDD16\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this), \" Processing with NLP...\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(ResultsDisplay, {\n      results: results\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Disclaimer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"ZQ66C7bLdc3G4/2tqHp6DTZu6v8=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["App","_s","symptoms","setSymptoms","useState","results","setResults","loading","setLoading","handleCheckSymptoms","trim","response","fetch","method","headers","body","JSON","stringify","data","json","error","console","handleClear","handleFetchSuggestions","alert","suggestions","join","_jsxDEV","className","children","fileName","_jsxFileName","lineNumber","columnNumber","SymptomInput","onCheck","onClick","ResultsDisplay","Disclaimer","_c","$RefreshReg$"],"sources":["/Users/pankajchakrabarty/Desktop/symptom-checker-frontend/frontend/src/App.js"],"sourcesContent":["function App() {\n  const [symptoms, setSymptoms] = useState(\"\");\n  const [results, setResults] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  // Existing function\n  const handleCheckSymptoms = async () => {\n    if (!symptoms.trim()) return;\n    setLoading(true);\n\n    try {\n      const response = await fetch(\"http://localhost:5001/api/check-symptoms\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ symptoms }),\n      });\n\n      const data = await response.json();\n      setResults(data.results || []);\n    } catch (error) {\n      console.error(\"Error fetching results:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // New function: Clear symptoms and results\n  const handleClear = () => {\n    setSymptoms(\"\");\n    setResults([]);\n  };\n\n  // New function: Fetch related symptom suggestions\n  const handleFetchSuggestions = async () => {\n    if (!symptoms.trim()) return;\n    setLoading(true);\n\n    try {\n      const response = await fetch(\"http://localhost:5001/api/symptom-suggestions\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ symptoms }),\n      });\n\n      const data = await response.json();\n      // This assumes the API returns something like { suggestions: [\"headache\", \"fever\"] }\n      alert(\"Suggested related symptoms: \" + (data.suggestions || []).join(\", \"));\n    } catch (error) {\n      console.error(\"Error fetching suggestions:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"app-container\">\n      <h1 className=\"app-title\">Medichat Symptom Checker</h1>\n      <p className=\"app-subtitle\">\n        Describe your symptoms naturally, and we'll suggest potential conditions.\n      </p>\n\n      <SymptomInput\n        symptoms={symptoms}\n        setSymptoms={setSymptoms}\n        onCheck={handleCheckSymptoms}\n      />\n\n      <div className=\"additional-actions\">\n        <button onClick={handleClear}>Clear</button>\n        <button onClick={handleFetchSuggestions}>Get Symptom Suggestions</button>\n      </div>\n\n      {loading ? (\n        <div className=\"processing\">\n          <span className=\"ai-icon\">ðŸ¤–</span> Processing with NLP...\n        </div>\n      ) : (\n        <ResultsDisplay results={results} />\n      )}\n\n      <Disclaimer />\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}